# Docker Compose Override for GCS Migration Testing
# This file provides GCS-compatible services for local development and testing

version: '3.8'

services:
  # GCS Emulator for Local Development
  gcs-emulator:
    image: fsouza/fake-gcs-server:latest
    container_name: tenderflow-gcs-emulator
    restart: unless-stopped
    ports:
      - "4443:4443"
    command: 
      - -scheme=http
      - -host=0.0.0.0
      - -port=4443
      - -external-url=http://localhost:4443
    volumes:
      - gcs_emulator_data:/data
    networks:
      - tenderflow-network
    environment:
      - STORAGE_EMULATOR_HOST=localhost:4443
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4443/storage/v1/b"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GCS Setup Container (creates initial buckets for testing)
  gcs-setup:
    image: google/cloud-sdk:alpine
    container_name: tenderflow-gcs-setup
    depends_on:
      - gcs-emulator
    networks:
      - tenderflow-network
    environment:
      - STORAGE_EMULATOR_HOST=gcs-emulator:4443
    volumes:
      - ./gcp/storage/bucket-config.yaml:/config/bucket-config.yaml:ro
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for GCS emulator...';
      sleep 5;
      
      # Create buckets using gsutil
      gsutil mb gs://tensurv-documents-prod || true;
      gsutil mb gs://tensurv-thumbnails-prod || true;
      gsutil mb gs://tensurv-temp-processing-prod || true;
      gsutil mb gs://tensurv-backups-prod || true;
      
      # Set bucket policies
      echo 'Setting up bucket policies...';
      gsutil iam ch allUsers:objectViewer gs://tensurv-thumbnails-prod || true;
      
      # Upload test files for validation
      echo 'test content' | gsutil cp - gs://tensurv-documents-prod/test/sample.txt;
      
      echo 'GCS emulator setup completed successfully';
      "

  # Updated API service to use GCS
  api:
    environment:
      # GCS Configuration
      - GCP_PROJECT_ID=tensurv-dev
      - GCS_DOCUMENTS_BUCKET=tensurv-documents-prod
      - GCS_THUMBNAILS_BUCKET=tensurv-thumbnails-prod
      - GCS_TEMP_BUCKET=tensurv-temp-processing-prod
      - GCS_BACKUP_BUCKET=tensurv-backups-prod
      - STORAGE_EMULATOR_HOST=gcs-emulator:4443
      - CDN_DOMAIN=http://localhost:4443
      
      # Disable MinIO (comment out when fully migrated)
      # - MINIO_ENDPOINT=minio
      # - MINIO_PORT=9000
      # - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-tenderflow}
      # - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-tenderflow123}
      # - MINIO_USE_SSL=false

  # Updated Jobs service to use GCS  
  jobs:
    environment:
      # GCS Configuration
      - GCP_PROJECT_ID=tensurv-dev
      - GCS_DOCUMENTS_BUCKET=tensurv-documents-prod
      - GCS_THUMBNAILS_BUCKET=tensurv-thumbnails-prod
      - GCS_TEMP_BUCKET=tensurv-temp-processing-prod
      - GCS_BACKUP_BUCKET=tensurv-backups-prod
      - STORAGE_EMULATOR_HOST=gcs-emulator:4443
      
      # Disable MinIO (comment out when fully migrated)
      # - MINIO_ENDPOINT=minio
      # - MINIO_PORT=9000
      # - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-tenderflow}
      # - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-tenderflow123}
      # - MINIO_USE_SSL=false

  # Nginx proxy for CDN simulation
  cdn-proxy:
    image: nginx:alpine
    container_name: tenderflow-cdn-proxy
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./gcp/cdn/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - tenderflow-network
    depends_on:
      - gcs-emulator
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Migration validation service
  migration-validator:
    build:
      context: .
      dockerfile: gcp/docker/Dockerfile.validator
    container_name: tenderflow-migration-validator
    networks:
      - tenderflow-network
    environment:
      - GCP_PROJECT_ID=tensurv-dev
      - STORAGE_EMULATOR_HOST=gcs-emulator:4443
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-tenderflow}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-tenderflow123}
      - MINIO_USE_SSL=false
    volumes:
      - ./gcp/migration:/app/migration:ro
      - migration_reports:/app/reports
    depends_on:
      - minio
      - gcs-emulator
    profiles:
      - migration

  # Keep MinIO for migration period (dual storage)
  minio:
    profiles:
      - migration  # Only start during migration phase

volumes:
  gcs_emulator_data:
    driver: local
  migration_reports:
    driver: local

networks:
  tenderflow-network:
    driver: bridge